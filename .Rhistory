q*bhat
q
#G prior
g = 30
q = g/(g+1)
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
q*bhat
#G prior
g = 500
q = g/(g+1)
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
q*bhat
bhat
bhat
f_train_dsd
#use discrepancies for the prior
inv_prior_var = diag(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2]))
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.05
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
inv_prior_var
#use discrepancies for the prior
inv_prior_var = diag(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2]))
inv_prior_var
sum(f_train_dsd[data_rng,1])
sum(f_train_dsd[data_rng,2])
diag(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2]))
#use discrepancies for the prior
inv_prior_var = diag(sum(c(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
inv_prior_var
#use discrepancies for the prior
inv_prior_var = diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
inv_prior_var
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.05
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
beta0 = c(0,1)
data_rng = c(15:20)
sig2 = 0.05
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
inv_prior_var = diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,1)
data_rng = c(15:20)
sig2 = 0.05
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
#use discrepancies for the prior
inv_prior_var = 20*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
y_train[data_rng]
data_rng = c(14:20)
sig2 = 0.05
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
data_rng = c(18:20)
sig2 = 0.05
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
b
bhat
inv_prior_var%*%beta0
t(f_train[data_rng,])%*%y_train[data_rng]/sig2
t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
sig2 = 1
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
data_rng = c(19:20)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
plot(f_train[data_rng,2],y_train[data_rng])
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
bhat
f_train[data_rng,]%*%bhat
inv_prior_var = 10*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,0)
data_rng = c(19:20)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
inv_prior_var = 10*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,1)
data_rng = c(19:20)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
beta0 = c(0,0)
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
#use discrepancies for the prior
data_rng = c(10:20)
inv_prior_var = 10*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,0)
sig2 = 1
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
inv_prior_var
b
bhat
inv_prior_var = 2*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,0)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
g = 10
q = g/(g+1)
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
q*bhat
#Plot the training data
plot(x_train, y_train, pch = 16, cex = 0.8, main = 'Training data')
lines(g_grid, fg(g_grid))
bhat
b
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
inv_prior_var
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
t(f_train[data_rng,])%*%f_train[data_rng,]/sig2
inv_prior_var
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Model Mixing with OpenBT
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 5,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 2, overallsd = sd(y_train)/sqrt(4), k = 2)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = 2, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'o', ylim = c(-1,1))
points(x_test, fitw$wmean[,2], col = 'blue', pch = 16)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed')
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed')
plot(fitw$wdraws[[1]][,25], type = 'l')
plot(fitw$wdraws[[1]][,185], type = 'l')
plot(fitw$wdraws[[2]][,25], type = 'l')
plot(fitw$wdraws[[2]][,185], type = 'l')
tnp10 = read.table(paste0(fit$folder,"/physics_model.tnp1draws0"))
tnp13 = read.table(paste0(fit$folder,"/physics_model.tnp1draws3"))
tnp20 = read.table(paste0(fit$folder,"/physics_model.tnp2draws0"))
tnp23 = read.table(paste0(fit$folder,"/physics_model.tnp2draws3"))
tnp_list = list(tnp10, tnp13, tnp20, tnp23)
par(mfrow = c(2,3))
for(i in 1:4){
for(j in 1:5){
temp = tnp_list[[i]]
plot(temp[,j], type ='l')
}
}
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 5,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
dev.off
dev.off()
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = 2)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'o', ylim = c(-1,2))
points(x_test, fitw$wmean[,2], col = 'blue', pch = 16)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed')
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed')
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'o', ylim = c(-1,1))
points(x_test, fitw$wmean[,2], col = 'blue', pch = 16)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed')
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed')
plot(fitw$wdraws[[1]][,25], type = 'l')
plot(fitw$wdraws[[1]][,185], type = 'l')
plot(fitw$wdraws[[2]][,25], type = 'l')
plot(fitw$wdraws[[2]][,185], type = 'l')
tnp10 = read.table(paste0(fit$folder,"/physics_model.tnp1draws0"))
tnp13 = read.table(paste0(fit$folder,"/physics_model.tnp1draws3"))
tnp20 = read.table(paste0(fit$folder,"/physics_model.tnp2draws0"))
tnp23 = read.table(paste0(fit$folder,"/physics_model.tnp2draws3"))
tnp_list = list(tnp10, tnp13, tnp20, tnp23)
par(mfrow = c(2,3))
for(i in 1:4){
for(j in 1:5){
temp = tnp_list[[i]]
plot(temp[,j], type ='l')
}
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Model Mixing with OpenBT
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 5,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = 2, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'o', ylim = c(-1,1))
points(x_test, fitw$wmean[,2], col = 'blue', pch = 16)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed')
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed')
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed')
#Trace Plot of the weights
plot(fitw$wdraws[[1]][,25], type = 'l')
plot(fitw$wdraws[[1]][,185], type = 'l')
plot(fitw$wdraws[[2]][,25], type = 'l')
plot(fitw$wdraws[[2]][,185], type = 'l')
tnp10 = read.table(paste0(fit$folder,"/physics_model.tnp1draws0"))
tnp13 = read.table(paste0(fit$folder,"/physics_model.tnp1draws3"))
tnp20 = read.table(paste0(fit$folder,"/physics_model.tnp2draws0"))
tnp23 = read.table(paste0(fit$folder,"/physics_model.tnp2draws3"))
tnp_list = list(tnp10, tnp13, tnp20, tnp23)
par(mfrow = c(2,3))
for(i in 1:4){
for(j in 1:5){
temp = tnp_list[[i]]
plot(temp[,j], type ='l')
}
}
fitw$wmean
fit$tau
fit$tau^2
fit$tau^2*5
1/0.0198
inv_prior_var = diag(c(50,50))
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.05
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
beta0 = c(0,1)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
beta0 = c(0,0)
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
beta0 = c(0,1)
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
range(y_train)
0.6/(2*2)
1/0.15
1/0.15^2
inv_prior_var = diag(c(50,15))
beta0 = c(0,1)
data_rng = c(15:20)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
beta0 = c(0,0)
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Check calculations
inv_prior_var = diag(c(50,3))
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
1/fit$tau^2
inv_prior_var = diag(c(50,20))
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
inv_prior_var = diag(c(50,50))
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
data_rng = c(15:20)
inv_prior_var = 2*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,0)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
inv_prior_var = diag(c(50,50))
beta0 = c(0,0)
data_rng = c(15:20)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 1,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
#Get the model weights
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = 2, tc = 4)
dev.off()
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fitw$wmean
fit$tau^2
1/fit$tau^2
data_rng = c(11:20)
sig2 = 0.1
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
data_rng = c(11:20)
inv_prior_var = 2*diag(c(sum(f_train_dsd[data_rng,1]),sum(f_train_dsd[data_rng,2])))
beta0 = c(0,0)
sig2 = 1
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
#solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[1,1])
#sqrt(solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)[2,2])
b = solve(t(f_train[data_rng,])%*%f_train[data_rng,]/sig2 + inv_prior_var)%*%(t(f_train[data_rng,])%*%y_train[data_rng]/sig2 + inv_prior_var%*%beta0)
f_train[data_rng,]%*%b
bhat = solve(t(f_train[data_rng,])%*%f_train[data_rng,])%*%t(f_train[data_rng,])%*%y_train[data_rng]
f_train[data_rng,]%*%bhat
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 2,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 4,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, minnumbot = 5, overallsd = sd(y_train)/sqrt(4), k = 2)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test,tc=4)
plot(g_grid, fg(g_grid), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.8,2.8))
points(x_train, y_train, pch = 3)
lines(g_grid, sapply(g_grid,fsg, small_g), col = 'red', lty = 2)
lines(g_grid, sapply(g_grid,flg, large_g), col = 'blue', lty = 2)
points(x_test, fitp$mmean, col = 'green4')
points(x_test, fitp$m.lower, col = 'orange')
points(x_test, fitp$m.upper, col = 'orange')
