plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
ex_prb2$x_test
ex_prb2$fits
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.2,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
ex_prb2$y_train
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
ex_prb = readRDS("Open BT Examples/Parabola.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb$x_test, f0(ex_prb$x_test), main = 'Training Data', type = 'l', ylim = c(-0.4,2),
xlab = 'x', ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb$x_train, ex_prb$y_train, pch = 3)
lines(ex_prb$x_test, ex_prb$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb$x_test, ex_prb$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb$x_test, f0(ex_prb$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),
xlab = 'x', ylab = 'y', panel.first = {grid(col = 'lightgrey')})
lines(ex_prb$x_test, ex_prb$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb$x_test, ex_prb$f_test[,2], col = 'blue', lty = 'dashed')
points(ex_prb$x_train, ex_prb$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_train, ex_prb2$fits, col = 'green2', lty = 3)
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_train, ex_prb2$fits, col = 'green2', lty = 3)
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_train, ex_prb2$fits, col = 'green2', lty = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
ex_prb = readRDS("Open BT Examples/Parabola.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb$x_test, f0(ex_prb$x_test), main = 'Training Data', type = 'l', ylim = c(-0.4,2),
xlab = 'x', ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb$x_train, ex_prb$y_train, pch = 3)
lines(ex_prb$x_test, ex_prb$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb$x_test, ex_prb$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb$x_test, f0(ex_prb$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),
xlab = 'x', ylab = 'y', panel.first = {grid(col = 'lightgrey')})
lines(ex_prb$x_train, ex_prb$fits, col = 'green4', lty = 3)
lines(ex_prb$x_test, ex_prb$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb$x_test, ex_prb$f_test[,2], col = 'blue', lty = 'dashed')
points(ex_prb$x_train, ex_prb$fits, col = 'green2', pch = 16)
ex_sin$y_train
ex_sin = readRDS("Open BT Examples/Sine.rds")
ex_sin$fits
ex_sin = readRDS("Open BT Examples/Sine.rds")
f0 = function(x,a=2,b=2){return(b*sin(a*x))}
par(mfrow = c(1,2))
plot(ex_sin$x_test, f0(ex_sin$x_test), main = 'Fitted Values', type = 'l', ylim = c(-2.5,3),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_sin$x_train, ex_sin$y_train, pch = 3)
lines(ex_sin$x_test, ex_sin$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_sin$x_test, ex_sin$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_sin$x_test, f0(ex_sin$x_test), main = 'Fitted Values', type = 'l', ylim = c(-2.5,3),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_sin$x_train, ex_sin$y_train, pch = 3)
lines(ex_sin$x_test, ex_sin$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_sin$x_test, ex_sin$f_test[,2], col = 'blue', lty = 'dashed')
points(ex_sin$x_train, ex_sin$fits, col = 'purple', pch = 16)
ex_sin = readRDS("Open BT Examples/Sine.rds")
f0 = function(x,a=2,b=2){return(b*sin(a*x))}
par(mfrow = c(1,2))
plot(ex_sin$x_test, f0(ex_sin$x_test), main = 'Training Data', type = 'l', ylim = c(-2.5,3),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_sin$x_train, ex_sin$y_train, pch = 3)
lines(ex_sin$x_test, ex_sin$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_sin$x_test, ex_sin$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_sin$x_test, f0(ex_sin$x_test), main = 'Fitted Values', type = 'l', ylim = c(-2.5,3),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_sin$x_train, ex_sin$y_train, pch = 3)
lines(ex_sin$x_test, ex_sin$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_sin$x_test, ex_sin$f_test[,2], col = 'blue', lty = 'dashed')
points(ex_sin$x_train, ex_sin$fits, col = 'purple', pch = 16)
n_train = 30
n_test = 300
s = 0.1 #s = 0.03
set.seed(44332211)
x_train = seq(0.01, 0.5, length = n_train)
y_train = fg(x_train) + rnorm(n_train, 0, s)
#Set a grid of test points
x_test = seq(0.01, 0.5, length = n_test)
fg_test = fg(x_test)
#Get data
sg4_lg4 = make_fdata(4,4,x_train,x_test)
f_train = sg4_lg4$f_train
f_test = sg4_lg4$f_test
#Grids
g_grid = seq(0.01, 0.5, length = 300)
fg_grid = fg(g_grid)
fs_grid = sapply(g_grid, fsg, 4)
fl_grid = sapply(g_grid, flg, 4)
f_grid = cbind(fs_grid, fl_grid)
#Write Data
wd = FALSE
if(wd){
write.table(x_train, 'Expansion Models - sg4 lg4/x.txt', row.names = FALSE, col.names = FALSE)
write.table(y_train, 'Expansion Models - sg4 lg4/y.txt', row.names = FALSE, col.names = FALSE)
write.table(f_train, 'Expansion Models - sg4 lg4/f.txt', row.names = FALSE, col.names = FALSE)
write.table(x_test, 'Expansion Models - sg4 lg4/x_test.txt', row.names = FALSE, col.names = FALSE)
write.table(f_test, 'Expansion Models - sg4 lg4/f_test.txt', row.names = FALSE, col.names = FALSE)
}
axfit = read.table("Expansion Models - sg4 lg4/Results 6/zz_fit_amxb2.txt")
axpred = read.table("Expansion Models - sg4 lg4/Results 6/zz_predict_amxb2.txt")
axpdraws = read.table("Expansion Models - sg4 lg4/Results 6/zz_pdraws_amxb2.txt", sep=',')
axsig = read.table("Expansion Models - sg4 lg4/Results 6/zz_postsig_amxb2.txt")
par(mfrow = c(1,2), oma = c(0,0,3,0))
plot_fit(x_train, axfit[,1], f_grid, title = 'Fitted Values')
plot_pred(x_train,y_train,x_test,axpred[,1],axpdraws,f_grid,title = 'Predicted Values')
mtext("Mixing Results for SG4 and LG4 Expansions", outer = TRUE, cex = 1.25)
axfit = read.table("Expansion Models - sg4 lg4/Results 5/zz_fit_amxb2.txt")
axpred = read.table("Expansion Models - sg4 lg4/Results 5/zz_predict_amxb2.txt")
axpdraws = read.table("Expansion Models - sg4 lg4/Results 5/zz_pdraws_amxb2.txt", sep=',')
axsig = read.table("Expansion Models - sg4 lg4/Results 5/zz_postsig_amxb2.txt")
par(mfrow = c(1,2), oma = c(0,0,3,0))
plot_fit(x_train, axfit[,1], f_grid, title = 'Fitted Values')
n_train = 40
n_test = 300
s = 0.03 #s = 0.03
set.seed(44332211)
x_train = seq(0.01, 0.5, length = n_train)
y_train = fg(x_train) + rnorm(n_train, 0, s)
#Set a grid of test points
x_test = seq(0.01, 0.5, length = n_test)
fg_test = fg(x_test)
#Get data
sg4_lg4 = make_fdata(4,4,x_train,x_test)
f_train = sg4_lg4$f_train
f_test = sg4_lg4$f_test
#Grids
g_grid = seq(0.01, 0.5, length = 300)
fg_grid = fg(g_grid)
fs_grid = sapply(g_grid, fsg, 4)
fl_grid = sapply(g_grid, flg, 4)
f_grid = cbind(fs_grid, fl_grid)
#Write Data
wd = FALSE
if(wd){
write.table(x_train, 'Expansion Models - sg4 lg4/x.txt', row.names = FALSE, col.names = FALSE)
write.table(y_train, 'Expansion Models - sg4 lg4/y.txt', row.names = FALSE, col.names = FALSE)
write.table(f_train, 'Expansion Models - sg4 lg4/f.txt', row.names = FALSE, col.names = FALSE)
write.table(x_test, 'Expansion Models - sg4 lg4/x_test.txt', row.names = FALSE, col.names = FALSE)
write.table(f_test, 'Expansion Models - sg4 lg4/f_test.txt', row.names = FALSE, col.names = FALSE)
}
axfit = read.table("Expansion Models - sg4 lg4/Results 5/zz_fit_amxb2.txt")
axpred = read.table("Expansion Models - sg4 lg4/Results 5/zz_predict_amxb2.txt")
axpdraws = read.table("Expansion Models - sg4 lg4/Results 5/zz_pdraws_amxb2.txt", sep=',')
axsig = read.table("Expansion Models - sg4 lg4/Results 5/zz_postsig_amxb2.txt")
par(mfrow = c(1,2), oma = c(0,0,3,0))
plot_fit(x_train, axfit[,1], f_grid, title = 'Fitted Values')
plot_pred(x_train,y_train,x_test,axpred[,1],axpdraws,f_grid,title = 'Predicted Values')
mtext("Mixing Results for SG4 and LG4 Expansions", outer = TRUE, cex = 1.25)
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Training Data', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Train.Data"), pch = c("-","-","-", 3) )
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Training Data', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Train.Data"), pch = c(-,-,-,3) )
ex_prb2 = readRDS("Open BT Examples/Parabola2.rds")
f0 = function(x,b=8,m=0.5,p=2){return(b*(x-m)^p)}
par(mfrow = c(1,2))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Training Data', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$y_train, pch = 3)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Train.Data"), pch = c('-','-','-','+'), col = c('black','blue','red', 'black'))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Fits"), pch = c('-','-','-',20), col = c('black','blue','red', 'green'))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Fits"), pch = c('-','-','-','.'), col = c('black','blue','red', 'green'))
plot(ex_prb2$x_test, f0(ex_prb2$x_test), main = 'Fitted Values', type = 'l', ylim = c(-0.4,2),xlab = 'x',
ylab = 'y', panel.first = {grid(col = 'lightgrey')})
points(ex_prb2$x_train, ex_prb2$fits, col = 'green2', pch = 16)
lines(ex_prb2$x_test, ex_prb2$f_test[,1], col = 'red', lty = 'dashed')
lines(ex_prb2$x_test, ex_prb2$f_test[,2], col = 'blue', lty = 'dashed')
legend('bottomleft', legend = c("True", "f1", "f2", "Fits"), pch = c('-','-','-','*'), col = c('black','blue','red', 'green'))
#openbt_example_model_mixing2.R
setwd("/home/johnyannotty/Documents/Open BT Project SRC")
f0 = function(x,a=2,b=2){return(b*sin(a*x))}
f1 = function(x,a,b){return(b*x+a)}
#Construct the samples
n_train = 20
n_test = 100
s = 0.5
x_train = seq(-pi/2,pi/2, length = n_train)
x_test = seq(-pi/2,pi/2, length = n_test)
set.seed(1234567)
y_train = f0(x_train) + rnorm(n_train, 0, s^2)
#Get linear model information
k = 2
model_info = list()
model_info$a = c(0,1)
model_info$b = c(-2,3)
#Get the function output for test and train data
f_train = matrix(0, nrow = n_train, ncol = k)
f_test = matrix(0, nrow = n_test, ncol = k)
for(i in 1:k){
f_train[,i] = f1(x_train, model_info$a[i], model_info$b[i])
f_test[,i] = f1(x_test, model_info$a[i], model_info$b[i])
}
#Cast x_train and x_test as matrices
x_train = as.matrix(x_train, ncol = 1)
x_test = as.matrix(x_test, ncol = 1)
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 2,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="sine",
ndpost = 5, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 0.75, minnumbot = 3, overallsd = sd(y_train)/sqrt(2), k = 2)
fv1 = read.table(paste0(fit$folder, "/sine1.fitvals"))
fv2 = read.table(paste0(fit$folder, "/sine2.fitvals"))
fv3 = read.table(paste0(fit$folder, "/sine3.fitvals"))
fv = unlist(c(fv1,fv2,fv3))
plot(x_test, f0(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l',ylim = c(-2,4))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 'dashed')
lines(x_test, f_test[,2], col = 'blue', lty = 'dashed')
points(x_train, fv, col = 'purple', pch = 16)
#Get some predictions
openbt.save(fit,"test")
# Load fitted model to a new object.
fit2=openbt.load("test")
# Predict the underlying response function
fitp=predict.openbt(fit2,x.test = x_test, f.test = f_test ,tc=4)
fitp$mmean
plot(x_test, f0(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l',ylim = c(-2,4))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 'dashed')
lines(x_test, f_test[,2], col = 'blue', lty = 'dashed')
points(x_test, fitp$mmean, col = 'purple', pch = 16)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, tc = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test)
fit$nd
fit$m
str(fit)
#--------------------------------------------------
#Get model mixing weights
#--------------------------------------------------
openbt.mixingwts = function(
fit=NULL,
x.test=NULL,
tc=2,
numwts=NULL,
q.lower=0.025,
q.upper=0.975
)
{
# model type definitions
MODEL_BT=1
MODEL_BINOMIAL=2
MODEL_POISSON=3
MODEL_BART=4
MODEL_HBART=5
MODEL_PROBIT=6
MODEL_MODIFIEDPROBIT=7
MODEL_MERCK_TRUNCATED=8
MODEL_MIXBART=9
#--------------------------------------------------
# params
if(is.null(fit)) stop("No fitted model specified!\n")
if(is.null(x.test)) stop("No prediction points specified!\n")
if(fit$modeltype!=MODEL_MIXBART){stop("Wrong model type! This function is for mixbart.\n")}
if(is.null(numwts)){stop("Missing number of model weights parameter numwts.\n")}
nslv=tc
x.test=as.matrix(x.test)
p=ncol(x.test)
n=nrow(x.test)
xwroot="xw"
#--------------------------------------------------
#write out config file
fout=file(paste(fit$folder,"/config.mxwts",sep=""),"w")
writeLines(c(fit$modelname,fit$modeltype,fit$xiroot,xwroot,
paste(fit$nd),paste(fit$m),
paste(fit$mh),paste(p),paste(numwts),paste(tc)), fout)
close(fout)
print(paste(c(fit$modelname,fit$modeltype,fit$xiroot,xwroot,
paste(fit$nd),paste(fit$m),
paste(fit$mh),paste(p),paste(numwts),paste(tc)), sep = ', '))
#--------------------------------------------------
#write out data subsets
#folder=paste(".",fit$modelname,"/",sep="")
xlist=split(as.data.frame(x.test),(seq(n)-1) %/% (n/nslv))
for(i in 1:nslv) write(t(xlist[[i]]),file=paste(fit$folder,"/",xwroot,i-1,sep=""))
for(i in 1:p) write(fit$xicuts[[i]],file=paste(fit$folder,"/",fit$xiroot,i,sep=""))
#--------------------------------------------------
#run prediction program
cmdopt=100 #default to serial/OpenMP
runlocal=FALSE
cmd="openbtcli --conf"
if(Sys.which("openbtcli")[[1]]=="") # not installed in a global location, so assume current directory
runlocal=TRUE
if(runlocal) cmd="./openbtcli --conf"
cmdopt=system(cmd)
if(cmdopt==101) # MPI
{
cmd=paste("mpirun -np ",tc," openbtmixingwts ",fit$folder,sep="")
}
if(cmdopt==100)  # serial/OpenMP
{
if(runlocal)
cmd=paste("./openbtmixingwts ",fit$folder,sep="")
else
cmd=paste("openbtmixingwts ",fit$folder,sep="")
}
system(cmd)
system(paste("rm -f ",fit$folder,"/config.mxwts",sep=""))
#--------------------------------------------------
#format and return
res=list()
wt_list = list()
mean_matrix = sd_matrix = ub_matrix = lb_matrix = med_matrix = matrix(0, nrow = n, ncol = numwts)
#Get the file names for the model weights
#--file name for model weight j using processor p is ".wjdrawsp"
for(j in 1:numwts){
#Get the files for weight j
tagname = paste0(".w", j,"draws*")
fnames=list.files(fit$folder,pattern=paste(fit$modelname,tagname,sep=""),full.names=TRUE)
#Bind the posteriors for weight j across all x points -- npost X n data
wt_list[[j]] = do.call(cbind,sapply(fnames,data.table::fread))
#Now populate the summary stat matrices -- n X k matrices
mean_matrix[,j] = apply(wt_list[[j]], 2, mean)
sd_matrix[,j] = apply(wt_list[[j]], 2, sd)
med_matrix[,j] = apply(wt_list[[j]], 2, med)
lb_matrix[,j] = apply(wt_list[[j]], 2, quantile,q.lower)
ub_matrix[,j] = apply(wt_list[[j]], 2, quantile,q.upper)
}
#Save the list of posterior draws -- each list element is an npost X n dataframe
res$wdraws = wt_list
#Get model mixing results
res$wmean=mean_matrix
res$wsd=sd_matrix
res$w.5=med_matrix
res$w.lower=lb_matrix
res$w.upper=ub_matrix
res$q.lower=q.lower
res$q.upper=q.upper
res$modeltype=fit$modeltype
class(res)="OpenBT_mixingwts"
return(res)
}
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 2,ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="sine",
ndpost = 5, nskip = 1000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 0.75, minnumbot = 3, overallsd = sd(y_train)/sqrt(2), k = 2)
#Get some predictions
openbt.save(fit,"test")
# Load fitted model to a new object.
fit2=openbt.load("test")
# Predict the underlying response function
fitp=predict.openbt(fit2,x.test = x_test, f.test = f_test ,tc=4)
fitp$mmean
plot(x_test, f0(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l',ylim = c(-2,4))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 'dashed')
lines(x_test, f_test[,2], col = 'blue', lty = 'dashed')
points(x_test, fitp$mmean, col = 'purple', pch = 16)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
fit2$folder
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
fit2$folder
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
#----------------------------------------------------------
#Run Open BT
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
View(fitw)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
View(fitw)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:20], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:10], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:10], numwts = 2)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test[1:10], numwts = 2)
View(fitw)
x_test[1:10]
fitw$wmean
fitw$wdraws
apply(fitw$wdraws,2,mean)
apply(fitw$wdraws[[1]],2,mean)
#Get the model weights
fitw = openbt.mixingwts(fit2, x.test = x_test, numwts = 2)
plot(x_test, fitw$wmean[,1])
fitw$wmean
rowSums(fitw$wmean*f_test)
xx = rowSums(fitw$wmean*f_test)
cbind(xx, fitp$mmean)
