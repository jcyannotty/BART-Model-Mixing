ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 5, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#Get the model weights
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=50,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#Get the model weights
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#Plot the variance
hist(fitp$sdraws)
plot(fitp$sdraws, type = 'l')
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
saveRDS(fitp_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_2p_0424.rds"))
saveRDS(fitw_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_2w_0424.rds"))
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=50,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k =6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#Get the model weights
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k =6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
hist(fitp$mdraws[,155])
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
saveRDS(fitp_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_3p_0424.rds"))
saveRDS(fitw_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_3w_0424.rds"))
#----------------------------------------------------------
detach(ex_data)
ex_data = get_data(20,300,0.005,2,4,0.03,0.5,54321, random_x = TRUE)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
ex_data$x_train = as.matrix(ex_data$x_train, ncol = 1)
ex_data$x_test = as.matrix(ex_data$x_test, ncol = 1)
K = ncol(ex_data$f_train)
attach(ex_data)
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k =6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#----------------------------------------------------------
#Get training data
ex_data = get_data(20,300,0.005,2,4,0.03,0.5,64321, random_x = TRUE)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
ex_data$x_train = as.matrix(ex_data$x_train, ncol = 1)
ex_data$x_test = as.matrix(ex_data$x_test, ncol = 1)
K = ncol(ex_data$f_train)
#----------------------------------------------------------
detach(ex_data)
attach(ex_data)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=100,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 3, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 3, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 3, overallsd = 0.01, k = 3, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#Plot the variance
hist(fitp$sdraws)
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 4, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
fit$minnumbot
fit$k
hist(fitp$mdraws[,155])
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 4, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
#Get mixed mean function
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
filedir = '/home/johnyannotty/Documents/Model Mixing BART/Open BT Examples/Non-Stationary Priors April 2022'
saveRDS(fitp_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_4p_0424.rds"))
saveRDS(fitw_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_4w_0424.rds"))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
#----------------------------------------------------------
detach(ex_data)
ex_data = get_data(20,300,0.005,2,4,0.03,0.5,321, random_x = TRUE)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
ex_data$x_train = as.matrix(ex_data$x_train, ncol = 1)
ex_data$x_test = as.matrix(ex_data$x_test, ncol = 1)
K = ncol(ex_data$f_train)
attach(ex_data)
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 6, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
fitw = openbt.mixingwts(fit, x.test = x_test, numwts = K, tc = 4)
#Plot model weights
plot(x_test, fitw$wmean[,1], pch = 16, col = 'red', type = 'l', ylim = c(-0.05,1.05), lwd = 2,
panel.first = {grid(col = 'lightgrey')})
lines(x_test, fitw$wmean[,2], col = 'blue', pch = 16, lwd = 2)
lines(x_test, fitw$w.upper[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,1], col = 'red', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.upper[,2], col = 'blue', lty = 'dashed', lwd = 1)
lines(x_test, fitw$w.lower[,2], col = 'blue', lty = 'dashed', lwd = 1)
abline(h = 1, col = 'grey', lty = 'dashed')
abline(h = 0, col = 'grey', lty = 'dashed')
#Write data
fitp_out = list(mmean = fitp$mmean,m.lower = fitp$m.lower, m.upper = fitp$m.upper)
fitw_out = list(wmean = fitw$wmean,w.lower = fitw$w.lower, w.upper = fitw$w.upper)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 10, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 3, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
#----------------------------------------------------------
fit=openbt(x_train,y_train,f_train,pbd=c(0.7,0.0),ntree = 20, ntreeh=1,numcut=300,tc=4,model="mixbart",modelname="physics_model",
ndpost = 10000, nskip = 2000, nadapt = 5000, adaptevery = 500, printevery = 500,
power = 1.0, base = 0.95, minnumbot = 2, overallsd = 0.01, k = 4, overallnu = 5,
f.discrep.mean =  f_train_dmean, f.discrep.sd = f_train_dsd,summarystats = FALSE)
fitp=predict.openbt(fit,x.test = x_test, f.test = f_test, f.discrep.mean =  f_test_dmean, f.discrep.sd = f_test_dsd ,tc=4, q.lower = 0.025, q.upper = 0.975)
plot(x_test, fg(x_test), pch = 16, cex = 0.8, main = 'Fits', type = 'l', ylim = c(1.85,2.75))
points(x_train, y_train, pch = 3)
lines(x_test, f_test[,1], col = 'red', lty = 2)
lines(x_test, f_test[,2], col = 'blue', lty = 2)
lines(x_test, fitp$mmean, col = 'green4', lwd = 2)
lines(x_test, fitp$m.lower, col = 'orange', lwd = 2)
lines(x_test, fitp$m.upper, col = 'orange', lwd = 2)
saveRDS(fitp_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_5p_0424.rds"))
saveRDS(fitw_out, paste0(filedir,"/Non-Stationary Priors 04-24/sg2lg4_5w_0424.rds"))
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
#----------------------------------------------------------
detach(ex_data)
ex_data = get_data(20,300,0.005,2,4,0.03,0.5,321, random_x = TRUE)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
ex_data$x_train
#----------------------------------------------------------
setwd("/home/johnyannotty/Documents/Open BT Project SRC")
source("/home/johnyannotty/Documents/Open BT Project SRC/openbt.R")
source('/home/johnyannotty/Documents/Model Mixing BART/physics expansion r functions.R')
source('/home/johnyannotty/Documents/Model Mixing BART/Model Mixing BART Testing Priors.R')
#----------------------------------------------------------
#Get training data
ex_data = get_data(20,300,0.005,2,4,0.03,0.5,321, random_x = FALSE)
plot_exp(ex_data$x_test,2,4, y_lim = c(1.8,3.0))
points(ex_data$x_train,ex_data$y_train, pch = 16, cex = 0.8)
ex_data$x_train = as.matrix(ex_data$x_train, ncol = 1)
ex_data$x_test = as.matrix(ex_data$x_test, ncol = 1)
K = ncol(ex_data$f_train)
attach(ex_data)
fit_lm = lm(y_train ~ f_train - 1)
fit_lm
summary(fit_lm)
sd(y_train)
str(summary(fit_lm))
sig2_hat = summary(fit_lm)$sigma^2
sig2_hat
sqrt(sig2_hat)
nu = 5
0.53*0.01
chi2_ub = qchisq(0.025, nu)
chi2_ub
chi2_lb = qchisq(0.025, nu)
chi2_ub = qchisq(0.975, nu)
chi2_ub
lam = (1/nu)*(sig2_hat/(1-rho))*(chi2_ub - chi2_lb)
rho = 0.01
lam = (1/nu)*(sig2_hat/(1-rho))*(chi2_ub - chi2_lb)
lam
chi2_ub
chi2_lb
lam
rho = 0.001
chi2_ub = qchisq(0.975, nu)
chi2_lb = qchisq(0.025, nu)
lam = (1/nu)*(sig2_hat/(1-rho))*(chi2_ub - chi2_lb)
lam
plot_prior_sig(5000,nu,0.68, x_lim = c(0,2))
sqrt(sig2_hat)
chi2_ub*rho*sig2_hat/nu
chi2_ub*sig2_hat/nu
chi2_lb*sig2_hat/nu
1/(rho*sig2_hat) - 1/(sig2_hat)
chi2_ub - chi2_ub
chi2_ub - chi2_lb
(chi2_ub - chi2_lb)/3508.413
lam = (1/nu)*(sig2_hat*rho/(1-rho))*(chi2_ub - chi2_lb)
lam
plot_prior_sig(5000,nu,0.0007, x_lim = c(0,2))
plot_prior_sig(5000,nu,0.0007, x_lim = c(0,0.2))
#plot prior standard dev - sigma
plot_prior_sig = function(n, nu, lam, x_lim = NULL, y_lim = NULL, title = NULL){
prior_sig = sqrt(rinvchi2(n,nu,lam))
if(is.null(x_lim)){x_lim = c(min(prior_sig), max(prior_sig))}
#pm = round(sqrt(nu*lam/(nu-2)),4)
pm = round(sqrt(prior_sig),4)
if(is.null(title)){
title = paste0('Prior Distribution of Sigma \n (nu = ',nu, ', lam = ',lam,', mean = ', pm,')')
}
ds = density(prior_sig)
if(is.null(y_lim)){y_lim = c(0, max(ds$y)) }
plot(ds, xlab = 'Sigma', ylab = 'density', main = title, panel.first = {grid(col = 'lightgrey')},
xlim = x_lim, ylim = y_lim)
abline(v = pm, col = 'red', lty = 'dashed')
}
plot_prior_sig(5000,nu,0.0007, x_lim = c(0,0.2))
#plot prior standard dev - sigma
plot_prior_sig = function(n, nu, lam, x_lim = NULL, y_lim = NULL, title = NULL){
prior_sig = sqrt(rinvchi2(n,nu,lam))
if(is.null(x_lim)){x_lim = c(min(prior_sig), max(prior_sig))}
#pm = round(sqrt(nu*lam/(nu-2)),4)
pm = round(mean(prior_sig),4)
if(is.null(title)){
title = paste0('Prior Distribution of Sigma \n (nu = ',nu, ', lam = ',lam,', mean = ', pm,')')
}
ds = density(prior_sig)
if(is.null(y_lim)){y_lim = c(0, max(ds$y)) }
plot(ds, xlab = 'Sigma', ylab = 'density', main = title, panel.first = {grid(col = 'lightgrey')},
xlim = x_lim, ylim = y_lim)
abline(v = pm, col = 'red', lty = 'dashed')
}
plot_prior_sig(5000,nu,0.0007, x_lim = c(0,0.2))
sig2_hat
plot_prior_sig2(5000,nu,0.0007, x_lim = c(0,0.2))
0.01*sig2_hat
sqrt(0.01*sig2_hat)
0.01*sqrt(sig2_hat)
plot_prior_sig(5000,nu,0.0007, x_lim = c(0,0.2))
sqrt(0.01*sig2_hat)
plot_prior_sig2(5000,nu,0.0007, x_lim = c(0,0.2))
plot_prior_sig2(5000,nu,0.0007, x_lim = c(0,0.1))
plot_prior_sig2(5000,nu,0.0007, x_lim = c(0,0.05))
(1/nu)
sig2_hat*rho/(1-rho)
(1/nu)*(sig2_hat*rho/(1-rho))*(chi2_ub - chi2_lb)
nu = 10
rho = 0.01
chi2_ub = qchisq(0.975, nu)
chi2_lb = qchisq(0.025, nu)
lam = (1/nu)*(sig2_hat*rho/(1-rho))*(chi2_ub - chi2_lb)
lam
2*nu*lam/(rho*sig2_hat)
2*nu*lam/(sig2_hat)
nu*lam/(sig2_hat)
nu*lam/(rho*sig2_hat)
sqrt(300)
