import os
import numbers

import subprocess as sbp

from pathlib import Path


def mpirun(openbt_cmd, n_procs, file_path):
    """
    All failures, including runtime failures of the underlying OpenBT command
    line tool, are reported to calling code by raising an exception.
    Therefore, no need to return anything since we assume that calling code
    knows where to look for the output generated by the call.

    .. todo::
        * Get this to work with different MPI implementations.
        * Is it correct that all openbt command line tools require at least one
          argument?
    """
    # ----- HARDCODED VALUES
    OMPI_ENV_VAR = "OPAL_PREFIX"
    MPI_INSTALL = Path(__file__).parent.joinpath("mpi")
    MPIRUN = MPI_INSTALL.joinpath("bin", "mpirun")
    if not MPIRUN.is_file():
        msg = "{} not found or not a file.  Check openbtmixing installation."
        raise RuntimeError(msg.format(MPIRUN))

    # ----- ERROR CHECK ARGUMENTS & ENVIRONMENT
    if not isinstance(n_procs, numbers.Integral):
        raise TypeError(f"n_procs ({n_procs}) not an integer")
    elif n_procs <= 0:
        raise ValueError(f"n_procs ({n_procs}) not a positive integer")

    if (not isinstance(file_path, str)) and (not isinstance(file_path, Path)):
        raise TypeError(f"file_path ({file_path}) is not string or Path object")
    elif not Path(file_path).is_dir():
        msg = f"file_path ({file_path}) does not exist or is not a directory"
        raise ValueError(msg)

    if OMPI_ENV_VAR in os.environ:
        msg = f"Do not set the OpenMPI {OMPI_ENV_VAR} environment variable"
        raise RuntimeError(msg)

    # ----- RUN C++ OpenBT COMMAND LINE TOOL
    try:
        # When we add OpenMPI into prebuilt wheels, we built OpenMPI in one
        # location and then effectively relocate it into the person's Python
        # installation folder via pip install.  This tells OpenMPI that it was
        # relocated and where to find it.
        #
        # https://docs.open-mpi.org/en/v5.0.x/installing-open-mpi/
        #       installation-location.html#relocating-an-open-mpi-installation
        os.environ[OMPI_ENV_VAR] = str(MPI_INSTALL)

        full_cmd = [str(MPIRUN), "-np", str(n_procs), openbt_cmd, str(file_path)]
        print("Running {}".format(" ".join(full_cmd)))
        output = sbp.run(full_cmd, check=True, capture_output=True)
    except sbp.CalledProcessError as err:
        stdout = err.stdout.decode()
        stderr = err.stderr.decode()
        print()
        msg = "[openbtmixing.mpirun] Unable to run command (Return code {})"
        print(msg.format(err.returncode))
        print("[openbtmixing.mpirun] " + " ".join(err.cmd))
        if stdout != "":
            print("[openbtmixing.mpirun] stdout")
            for line in stdout.split("\n"):
                print(f"\t{line}")
        if stderr != "":
            print("[openbtmixing.mpirun] stderr")
            for line in stderr.split("\n"):
                print(f"\t{line}")
        raise
    finally:
        del os.environ[OMPI_ENV_VAR]
