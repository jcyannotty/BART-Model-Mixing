name: Test OpenBTMixing Python Package
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CLONE_PATH:   ${{ github.workspace }}
  EIGEN_PATH:   ${{ github.workspace }}/eigen
  INSTALL_PATH: ${{ github.workspace }}/local/OpenBT

jobs:
  #####----- FULL TESTING WITHOUT COVERAGE
  test_pypkg:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        mpi_impl: ["openmpi", "mpich"]
        python-version: ["3.8"]

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install autoconf
            brew install autoconf-archive
            brew install automake
            brew install libtool
        else
            sudo apt-get update
            sudo apt-get -y install autoconf-archive
        fi
    - name: Install ${{ matrix.mpi_impl }}
      run: |
        if   [ "${{ runner.os }}" == "Linux" ]; then
           sudo apt-get update
           sudo apt-get -y install openmpi-bin
        elif [ "${{ runner.os }}" == "macOS" ]; then
           if   [ "${{ matrix.mpi_impl }}" == "openmpi" ]; then
              brew install open-mpi
           else
              echo "Cannot install ${{ matrix.mpi_impl }} for macOS"
              exit 1
           fi
        fi
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # For building wheel only
        python -m pip install build
    - name: Install eigen dependency
      run: |
        # C++ template only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        $CLONE_PATH/tools/build_openbt_clt.sh $INSTALL_PATH
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            otool -L $INSTALL_PATH/bin/openbtcli
        else
            ldd $INSTALL_PATH/bin/openbtcli
        fi

    ##-- Run full test suite
    # Prefer full end-to-end test of binary wheels rather than testing in
    # local clone alone
    #
    # This also confirms that the test script is functional
    - name: Run full OpenBtMixing test suite
      run: |
        export PATH=$PATH:$INSTALL_PATH/bin
        echo " "
        which python
        which pip
        python --version
        echo " "
        python -c "import platform ; print(platform.machine())"
        python -c "import platform ; print(platform.system())"
        python -c "import platform ; print(platform.release())"
        python -c "import platform ; print(platform.platform())"
        python -c "import platform ; print(platform.version())"
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -c "import platform ; print(platform.mac_ver())"
        fi
        pushd $CLONE_PATH/openbtmixing_pypkg
        echo " "
        echo "Building source and binary wheels"
        echo "-------------------------------------------------"
        python -m build
        echo " "
        echo "Install binary wheel"
        echo "-------------------------------------------------"
        python -m pip install dist/openbtmixing-*-py3-none-any.whl
        echo " "
        popd
        pip list
        echo " "
        echo "Test installed package"
        echo "-------------------------------------------------"
        $CLONE_PATH/tools/test_python_installation.py -v 2

  #####----- FULL TESTING WITH COVERAGE
  pypkg_coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        mpi_impl: ["openmpi"]
        python-version: ["3.11"]

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        sudo apt-get update
        sudo apt-get -y install autoconf-archive
    - name: Install ${{ matrix.mpi_impl }}
      run: |
        if   [ "${{ runner.os }}" == "Linux" ]; then
           sudo apt-get update
           sudo apt-get -y install openmpi-bin
        elif [ "${{ runner.os }}" == "macOS" ]; then
           /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
           brew install open-mpi
        fi
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install tox
    - name: Install eigen dependency
      run: |
        # C++ template only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        $CLONE_PATH/tools/build_openbt_clt.sh $INSTALL_PATH

    ##-- Run full test suite
    # Run this from local clone since we have already tested packages.
    #
    # This checks that coverage tox environment is functional.
    - name: Run full OpenBtMixing test suite
      run: |
        export PATH=$PATH:$INSTALL_PATH/bin
        echo " "
        which python
        which pip
        which tox
        python --version
        tox --version
        echo " "
        pip list
        echo " "
        pushd $CLONE_PATH/openbtmixing_pypkg
        tox -r -e coverage,report
        popd

    ##-- Publish full coverage report as artifact
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-results
        path: |
            $CLONE_PATH/openbtmixing_pypkg/.coverage
            $CLONE_PATH/openbtmixing_pypkg/htmlcov
