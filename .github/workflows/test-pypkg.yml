name: Test OpenBTMixing Python Package
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  #####----- FULL TESTING WITHOUT COVERAGE
  test_pypkg:
    runs-on: ${{ matrix.os }}
    env:
      EIGEN_PATH: ${{ github.workspace }}/eigen
      INSTALL_PATH: ${{ github.workspace }}/local
    strategy:
      matrix:
        os: [ubuntu-latest]
        mpi_impl: ["openmpi"]
        python-version: ["3.8"]

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install autoconf
            brew install autoconf-archive
            brew install automake
            brew install libtool
        else
            sudo apt-get update
            sudo apt-get -y install autoconf-archive
        fi
    - name: Install ${{ matrix.mpi_impl }}
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: ${{ matrix.mpi_impl }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # For building wheel only
        python -m pip install build
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -m pip install delocate
        else
            python -m pip install auditwheel
        fi
    - name: Install eigen dependency
      run: |
        # C++ Header only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        ${{ github.workspace }}/tools/build_openbt_clt.sh $INSTALL_PATH

    ##-- Run full test suite
    # Prefer full end-to-end test of binary wheels rather than testing in
    # local clone alone
    #
    # This also confirms that the test script is functional
    - name: Run full OpenBtMixing test suite
      run: |
        echo " "
        which python
        which pip
        python --version
        echo " "
        python -c "import platform ; print(platform.machine())"
        python -c "import platform ; print(platform.system())"
        python -c "import platform ; print(platform.release())"
        python -c "import platform ; print(platform.platform())"
        python -c "import platform ; print(platform.version())"
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -c "import platform ; print(platform.mac_ver())"
        fi
        echo " "
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
            ${{ github.workspace }}/tools/build_macos_wheel.sh ${{ matrix.mpi_impl }}
            echo " "
            echo "Install final binary wheel"
            echo "-------------------------------------------------"
            python -m pip install openbtmixing-*.whl
            echo " "
            pip list
            echo " "
            echo "Test installed package"
            echo "-------------------------------------------------"
            ${{ github.workspace }}/tools/test_python_installation.py -v 2
        else
            pushd ${{ github.workspace }}/openbtmixing_pypkg
            echo " "
            echo "Building binary wheel"
            echo "-------------------------------------------------"
            python -m build -w
            echo " "
            echo "Fix binary wheel with auditwheel"
            echo "-------------------------------------------------"
            pushd dist
            ls -lart
            echo " "
            auditwheel --help
            echo " "
            auditwheel repair --help
            echo " "
            auditwheel show openbtmixing-*.whl
            echo " "
            auditwheel repair openbtmixing-*.whl
            echo " "
            auditwheel show openbtmixing-*.whl
            echo " "
            tar tvfz openbtmixing-*.whl
            echo " "
            popd
            popd
        fi

  #####----- FULL TESTING WITH COVERAGE
  pypkg_coverage:
    runs-on: ${{ matrix.os }}
    env:
      EIGEN_PATH: ${{ github.workspace }}/eigen
      INSTALL_PATH: ${{ github.workspace }}/local
    strategy:
      matrix:
        os: [macos-latest]
        mpi_impl: ["openmpi"]
        python-version: ["3.11"]

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        brew install autoconf
        brew install autoconf-archive
        brew install automake
        brew install libtool
    - name: Install ${{ matrix.mpi_impl }}
      uses: mpi4py/setup-mpi@v1
      with:
        mpi: ${{ matrix.mpi_impl }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install tox
    - name: Install eigen dependency
      run: |
        # C++ Header only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
#    - name: Build OpenBTMixing C++ CLTs & Libraries
#      run: |
#        export CPATH=$EIGEN_PATH
#        ${{ github.workspace }}/tools/build_openbt_clt.sh $INSTALL_PATH
#
#    ##-- Run full test suite
#    # Run this from local clone since we have already tested packages.
#    #
#    # This checks that coverage tox environment is functional.
#    - name: Run full OpenBtMixing test suite
#      run: |
#        echo " "
#        which python
#        which pip
#        which tox
#        python --version
#        tox --version
#        echo " "
#        pip list
#        echo " "
#        pushd ${{ github.workspace }}/openbtmixing_pypkg
#        tox -r -e coverage,report
#        popd
#
#    ##-- Publish full coverage report as artifact
#    - name: Archive code coverage results
#      uses: actions/upload-artifact@v4
#      with:
#        name: code-coverage-results
#        path: |
#            ${{ github.workspace }}/openbtmixing_pypkg/.coverage
#            ${{ github.workspace }}/openbtmixing_pypkg/htmlcov
