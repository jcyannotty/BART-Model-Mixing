name: Test OpenBTMixing Python Package
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  #####----- FULL TESTING WITHOUT COVERAGE
  test_pypkg:
    runs-on: ${{ matrix.os }}
    env:
      EIGEN_PATH: ${{ github.workspace }}/eigen
      INSTALL_PATH: ${{ github.workspace }}/local/OpenBT
    strategy:
      matrix:
        # For macos-14 (i.e., arm64/macOS), presently
        # * OpenMPI fails due to too few processors (3) when the test asks for
        #   4 MPI processes
        # * MPICH seems to run forever (MPI_Finalize seems to hang on my
        #   machine)
        #os: [ubuntu-20.04, ubuntu-22.04, macos-12, macos-13]
        #mpi_impl: ["openmpi", "mpich"]
        #python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-22.04]
        mpi_impl: ["openmpi"]
        python-version: ["3.9"]
        exclude:
          # For Ubuntu20.04, presently
          # * OpenMPI fails due to too few processors (2 cores with 2 HW threads per
          #   core) when the test asks for 4 MPI processes
          - os: ubuntu-20.04
            mpi_impl: "openmpi"
          # For Ubuntu22.04, presently
          # * configure fails to build with mpicxx because it sets -L to an
          #   OpenMPI installation folder that does not have the libraries.  It
          #   appears that the libraries go to the system lib folder.  MPICH 
          #   sets -L to the system library folder.
          #- os: ubuntu-22.04
          #  mpi_impl: "openmpi"

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        if [ "${{ runner.os }}" = "macOS" ]; then
            brew install autoconf
            brew install autoconf-archive
            brew install automake
            brew install libtool
        else
            sudo apt-get update
            sudo apt-get -y install autoconf-archive
        fi
    - name: Install ${{ matrix.mpi_impl }}
      run: |
          if   [ "${{ runner.os }}" == "Linux" ]; then
             if   [ "${{ matrix.mpi_impl }}" == "openmpi" ]; then
                sudo apt-get -y install openmpi-bin libopenmpi-dev
             elif [ "${{ matrix.mpi_impl }}" == "mpich" ]; then
                sudo apt-get -y install mpich
             else
                echo "Cannot install ${{ matrix.mpi_impl }} for Linux"
                exit 1
             fi
          elif [ "${{ runner.os }}" == "macOS" ]; then
             if   [ "${{ matrix.mpi_impl }}" == "openmpi" ]; then
                brew install open-mpi
             elif [ "${{ matrix.mpi_impl }}" == "mpich" ]; then
                brew install mpich
             else
                echo "Cannot install ${{ matrix.mpi_impl }} for macOS"
                exit 1
             fi
          fi
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        # For building wheel only
        python -m pip install build
    - name: Install eigen dependency
      run: |
        # C++ template only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        ${{ github.workspace }}/tools/build_openbt_clt.sh $INSTALL_PATH
        if   [ "${{ runner.os }}" = "macOS" ]; then
            otool -L $INSTALL_PATH/bin/openbtcli
        elif [ "${{ matrix.os }}" == "ubuntu-20.04" ]; then
            ldd $INSTALL_PATH/bin/openbtcli 
        elif [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            # mpicxx lists many libraries for linking, but didn't put the full
            # set of -L folders before the list.  Based on testing and some
            # reading online, it appears that autotools ignores LIBRARY_PATH so
            # that LDFLAGS is the appropriate env var to use.
            ls -la /lib/x86_64-linux-gnu
            ldconfig -p
            ldd $INSTALL_PATH/bin/openbtcli
        else
            echo "Invalid OS ${{ matrix.os }}"
        fi
        echo " "
        objdump -p $INSTALL_PATH/bin/openbtcli
        echo " "

    ##-- Run full test suite
    # Prefer full end-to-end test of binary wheels rather than testing in
    # local clone alone
    #
    # This also confirms that the test script is functional
    - name: Run full OpenBtMixing test suite
      run: |
        export PATH=$PATH:$INSTALL_PATH/bin
        echo " "
        which mpirun
        which openbtcli
        echo " "
        which python
        which pip
        python --version
        echo " "
        python -c "import platform ; print(platform.machine())"
        python -c "import platform ; print(platform.system())"
        python -c "import platform ; print(platform.release())"
        python -c "import platform ; print(platform.platform())"
        python -c "import platform ; print(platform.version())"
        if   [ "${{ runner.os }}" = "Linux" ]; then
            echo " "
            # Get information on number of cores & hardware threads, which sets
            # limit on number of "slots" available for MPI processes in
            # OpenMPI.
            lscpu
        elif [ "${{ runner.os }}" = "macOS" ]; then
            python -c "import platform ; print(platform.mac_ver())"
            # Get information on number of processors, which sets limit on
            # number of "slots" available for MPI processes in OpenMPI.
            echo " "
            sysctl hw.ncpu
            sysctl hw.physicalcpu
            sysctl hw.logicalcpu
        fi
        pushd ${{ github.workspace }}/openbtmixing_pypkg
        echo " "
        echo "Building source and wheels"
        echo "-------------------------------------------------"
        python -m build
        echo " "
        echo "Install wheel"
        echo "-------------------------------------------------"
        python -m pip install dist/openbtmixing-*-py3-none-any.whl
        echo " "
        popd
        pip list
        echo " "
        echo "Test installed package"
        echo "-------------------------------------------------"
        ${{ github.workspace }}/tools/test_python_installation.py -v 2

  #####----- FULL TESTING WITH COVERAGE
  pypkg_coverage:
    runs-on: ${{ matrix.os }}
    env:
      EIGEN_PATH: ${{ github.workspace }}/eigen
      INSTALL_PATH: ${{ github.workspace }}/local/OpenBT
    strategy:
      matrix:
        os: [ubuntu-22.04]
        mpi_impl: ["mpich"]
        python-version: ["3.12"]

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        sudo apt-get update
        sudo apt-get -y install autoconf-archive
    - name: Install ${{ matrix.mpi_impl }}
      run: sudo apt-get -y install mpich
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install tox
    - name: Install eigen dependency
      run: |
        # C++ template only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        ${{ github.workspace }}/tools/build_openbt_clt.sh $INSTALL_PATH

    ##-- Run full test suite
    # Run this from local clone since we have already tested packages.
    #
    # This checks that coverage tox environment is functional.
    - name: Run full OpenBtMixing test suite
      run: |
        export PATH=$PATH:$INSTALL_PATH/bin
        echo " "
        which python
        which pip
        which tox
        python --version
        tox --version
        echo " "
        pip list
        echo " "
        pushd ${{ github.workspace }}/openbtmixing_pypkg
        tox -r -e coverage,report
        popd

    ##-- Publish full coverage report as artifact
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-results
        path: |
            ${{ github.workspace }}/openbtmixing_pypkg/.coverage
            ${{ github.workspace }}/openbtmixing_pypkg/htmlcov
