name: Test OpenBTMixing Python Package
env:
  CLONE_PATH:   ${{ github.workspace }}
  EIGEN_PATH:   ${{ github.workspace }}/../local/eigen
  INSTALL_PATH: ${{ github.workspace }}/../local/OpenBT
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  #####----- FULL TESTING WITHOUT COVERAGE
  test_pypkg:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # For macos-14 (i.e., arm64/macOS), presently
        # * OpenMPI fails due to too few processors (3) when the test asks for
        #   4 MPI processes
        # * MPICH seems to run forever (MPI_Finalize seems to hang on my
        #   machine)
        os: [ubuntu-20.04, ubuntu-22.04]
        mpi_impl: ["openmpi"]
        python-version: ["3.9"]
        #exclude:
        #  # For Ubuntu20.04, presently
        #  # * OpenMPI fails due to too few processors (2 cores with 2 HW threads per
        #  #   core) when the test asks for 4 MPI processes
        #  - os: ubuntu-20.04
        #    mpi_impl: "openmpi"
        #  # For Ubuntu22.04, presently
        #  # * OpenMPI fails due to too few processors (2 cores with 2 HW threads per
        #  #   core) when the test asks for 4 MPI processes
        #  - os: ubuntu-22.04
        #    mpi_impl: "openmpi"

    steps:
    #####----- SETUP TESTING ENVIRONMENT
    - name: Checkout OpenBTMixing
      uses: actions/checkout@v4
    - name: Install autotools
      run: |
        if   [ "${{ runner.os }}" = "macOS" ]; then
            brew install autoconf-archive
            brew install automake
        elif [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get -y install autoconf-archive
        else
            echo "Invalid runner or OS"
            exit 1
        fi
    - name: Install ${{ matrix.mpi_impl }}
      run: |
          if   [ "${{ runner.os }}" = "Linux" ]; then
             if   [ "${{ matrix.mpi_impl }}" = "openmpi" ]; then
                sudo apt-get -y install openmpi-bin libopenmpi-dev
             elif [ "${{ matrix.mpi_impl }}" = "mpich" ]; then
                sudo apt-get -y install mpich
             else
                echo "Cannot install ${{ matrix.mpi_impl }} for Linux"
                exit 1
             fi
          elif [ "${{ runner.os }}" = "macOS" ]; then
             if   [ "${{ matrix.mpi_impl }}" = "openmpi" ]; then
                brew install open-mpi
             elif [ "${{ matrix.mpi_impl }}" = "mpich" ]; then
                brew install mpich
             else
                echo "Cannot install ${{ matrix.mpi_impl }} for macOS"
                exit 1
             fi
          fi
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Python dependencies
      run: |
        $CLONE_PATH/.github/workflows/setup_base_python.sh ${{ runner.os }}
    - name: Install eigen dependency
      run: |
        # C++ template only => no build here! 
        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH

    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
    - name: Build OpenBTMixing C++ CLTs & Libraries
      run: |
        export CPATH=$EIGEN_PATH
        $CLONE_PATH/tools/build_openbt_clt.sh $INSTALL_PATH
        echo " "
        if   [ "${{ runner.os }}" = "macOS" ]; then
            otool -L $INSTALL_PATH/bin/openbtcli
        elif [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
            if   [ "${{ matrix.mpi_impl }}" = "openmpi" ]; then
               # For 20.04/OpenMPI 4.0.3/g++ 9.4.0, mpicxx uses
               #   -I/usr/lib/x86_64-linux-gnu/openmpi/include
               #   -I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
               #   -L/usr/lib/x86_64-linux-gnu/openmpi/lib
               # which make good sense since using the OpenMPI usr
               # installation.
               #
               # These lines can be used to confirm that OpenMPI is being used
               # correctly at build and execution time.
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/include
               echo " "
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
               echo " "
               # Contains non-versioned libraries for use when linking that
               # symlink to specific version in same folder
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/lib
               echo " "
               # Contains non-versioned libraries symlinked to versioned
               # libraries in same folder except for
               # libmpi.so -> /etc/alternatives/libmpi.so-x86_64-linux-gnu.
               # However, this last is not found when linking and is therefore
               # not used at execution time.  The versioned libraries are in
               # turn symlinked to libraries in
               # /lib/x86_64-linux-gnu/openmpi/lib
               ls -la /lib/x86_64-linux-gnu/libmpi*
               echo " "
               # Contains versioned libraries and non-versioned libraries
               # symlinked to specific version in the same folder.  Note that
               # libmpi.so.40.20.3 has the same size (1124440) here and in 
               # /usr/lib/x86_64-linux-gnu/openmpi/lib; Same for
               # libmpi_cxx.so.40.20.1 with size 118648.  It appears that
               # installing OpenMPI puts identical libraries in /usr/lib and
               # /lib and that we link against the former but execute with the
               # latter.
               ls -la /lib/x86_64-linux-gnu/openmpi/lib
               echo " "
               ls -la /etc/alternatives/libmpi*
            elif [ "${{ matrix.mpi_impl }}" = "mpich" ]; then
               # For 20.04/MPICH 3.3.2, mpicxx uses 
               #   -I/usr/include/x86_64-linux-gnu/mpich
               #   -L/usr/lib/x86_64-linux-gnu
               #
               # These lines can be used to confirm that MPICH is being used
               # correctly at build and execution time.
               #ls -la /usr/include/x86_64-linux-gnu/mpich
               #echo " "
               #ls -la /usr/lib/x86_64-linux-gnu
               #echo " "
               #ls -la /lib/x86_64-linux-gnu/libmpi*
            else
               echo "Cannot install ${{ matrix.mpi_impl }} for macOS"
               exit 1
            fi
            echo " "
            ldd $INSTALL_PATH/bin/openbtcli 
        elif [ "${{ matrix.os }}" = "ubuntu-22.04" ]; then
            if   [ "${{ matrix.mpi_impl }}" = "openmpi" ]; then
               # For 22.04/OpenMPI 4.1.2/g++ 11.4.0, mpicxx uses
               #   -I/usr/lib/x86_64-linux-gnu/openmpi/include
               #   -I/usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
               #   -L/usr/lib/x86_64-linux-gnu/openmpi/lib
               # which make good sense since using the OpenMPI usr
               # installation.
               #
               # These lines can be used to confirm that OpenMPI is being used
               # correctly at build and execution time.
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/include
               echo " "
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/include/openmpi
               echo " "
               # Contains non-versioned libraries for use when linking that
               # symlink to specific version in /usr/lib/x86_64-linux-gnu
               ls -la /usr/lib/x86_64-linux-gnu/openmpi/lib
               echo " "
               ls -la /usr/lib/x86_64-linux-gnu/libmpi*
               echo " "
               # Contains versioned libraries and non-versioned libraries
               # symlinked to specific version in the same folder except for
               # libmpi.so -> /etc/alternatives/libmpi.so-x86_64-linux-gnu.
               # However, this last is not found when linking and is therefore
               # not used at execution time.
               ls -la /lib/x86_64-linux-gnu/libmpi*
               echo " "
               ls -la /etc/alternatives/libmpi*
            elif [ "${{ matrix.mpi_impl }}" = "mpich" ]; then
               # For 22.04/MPICH 4.0-3, mpicxx uses 
               #   -I/usr/include/x86_64-linux-gnu/mpich 
               #   -L/usr/lib/x86_64-linux-gnu 
               #
               # These lines can be used to confirm that MPICH is being used
               # correctly at build and execution time.
               #ls -la /usr/include/x86_64-linux-gnu/mpich
               #echo " "
               #ls -la /usr/lib/x86_64-linux-gnu
               #echo " "
               #ls -la /lib/x86_64-linux-gnu/libmpi*
            fi
            echo " "
            ldd $INSTALL_PATH/bin/openbtcli 
        else
            echo "Invalid OS ${{ matrix.os }}"
        fi
        echo " "
        objdump -p $INSTALL_PATH/bin/openbtcli
        echo " "

    ##-- Run full test suite
    # Prefer full end-to-end test of binary wheels rather than testing in
    # local clone alone
    #
    # This also confirms that the test script is functional
    - name: Run full OpenBtMixing test suite
      run: |
        export PATH=$PATH:$INSTALL_PATH/bin
        echo " "
        which mpirun
        which openbtcli
        echo " "
        pushd $CLONE_PATH/openbtmixing_pypkg
        echo " "
        echo "Building source and wheels"
        echo "-------------------------------------------------"
        python -m build
        echo " "
        echo "Install wheel"
        echo "-------------------------------------------------"
        python -m pip install dist/openbtmixing-*-py3-none-any.whl
        echo " "
        popd
        pip list
        echo " "
        echo "Test installed package"
        echo "-------------------------------------------------"
        $CLONE_PATH/tools/test_python_installation.py -v 2

  #####----- FULL TESTING WITH COVERAGE
#  pypkg_coverage:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-22.04]
#        mpi_impl: ["mpich"]
#        python-version: ["3.12"]
#
#    steps:
#    #####----- SETUP TESTING ENVIRONMENT
#    - name: Checkout OpenBTMixing
#      uses: actions/checkout@v4
#    - name: Install autotools
#      run: |
#        sudo apt-get update
#        sudo apt-get -y install autoconf-archive
#    - name: Install ${{ matrix.mpi_impl }}
#      run: sudo apt-get -y install mpich
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v5
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Setup Python dependencies
#      run: |
#        $CLONE_PATH/.github/workflows/setup_base_python.sh ${{ runner.os }}
#    - name: Install eigen dependency
#      run: |
#        # C++ template only => no build here! 
#        git clone https://gitlab.com/libeigen/eigen.git $EIGEN_PATH
#
#    #####----- BUILD WHEEL FROM SCRATCH & INSTALL
#    - name: Build OpenBTMixing C++ CLTs & Libraries
#      run: |
#        export CPATH=$EIGEN_PATH
#        $CLONE_PATH/tools/build_openbt_clt.sh $INSTALL_PATH
#
#    ##-- Run full test suite
#    # Run this from local clone since we have already tested packages.
#    #
#    # This checks that coverage tox environment is functional.
#    - name: Run full OpenBtMixing test suite
#      run: |
#        export PATH=$PATH:$INSTALL_PATH/bin
#        pushd $CLONE_PATH/openbtmixing_pypkg
#        tox -r -e coverage,report
#        popd
#
#    ##-- Publish full coverage report as artifact
#    - name: Archive code coverage results
#      uses: actions/upload-artifact@v4
#      with:
#        name: code-coverage-results
#        path: |
#            ${{ env.CLONE_PATH }}/openbtmixing_pypkg/.coverage
#            ${{ env.CLONE_PATH }}/openbtmixing_pypkg/htmlcov
